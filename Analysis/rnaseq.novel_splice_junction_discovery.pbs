#!/bin/bash

#PBS -l walltime=80:00:00,nodes=1:ppn=40
#PBS -joe .
#PBS -d .
#PBS -l vmem=80g,mem=80g

if [ -z "$transcriptFile" ];
then
		echo "ERROR - Specify a path to a transcriptFile with the format:"
		echo "Gene	Type	Chrom	Start	End	NTimesSeen	NSamplesSeen	Samples:NSeen"
		echo "AL627309.1	BLAH	1	136903	136953	1	1	G34487:1"
		exit 1
fi

#if [ -z "$sample" ];
#then
#		echo "ERROR - Specify the name of the bam file you want to discover junctions specific to with the bam extension"
#		echo "E.x. findNovel.bam would be sample=findNovel"
#		exit 1
#fi

home='/home/dennis.kao/tools/MendelianRNA-seq-DB'

name=`basename $transcriptFile`
sjdOutput="All."$name".splicing.list"

#	Optional parameters
if [ -z "$minRead" ];
then
		minRead=10
fi

if [ -z "$threshold" ];
then
		threshold=0.5
fi

if [ -z "$processes" ];
then
		processes=40
fi

if [ -z "$bamList" ];
then
		bamList='bamlist.list'
fi

normOutput="norm-"$sjdOutput
filteredOutput="threshold"$threshold"_novel_"$sample"_norm_"$sjdOutput

module load python/3.5.2
python $home/Analysis/SpliceJunctionDiscovery.py -transcriptFile=$transcriptFile -bamList=$bamList -processes=$processes

#if [ -z "transcript_model" ];
#then
#	$home/Analysis/NormalizeSpliceJunctionValues.py -transcript_model=$transcript_model -splice_file=$sjdOutput --normalize > $normOutput
#else
#	$home/Analysis/NormalizeSpliceJunctionValues.py -splice_file=$sjdOutput --normalize > $normOutput
#fi

#rm $sjdOutput

#cat $normOutput | grep $sample | awk "{ if (\$5 == 1 && \$4 >= $minread ) print \$0 }" | sed "s/:$sample//" | sed "s/:$sample//" | awk "{if (\$7 == \"Neither\" || \$9 > $threshold) print \$0}" > $filteredOutput
